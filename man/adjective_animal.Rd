% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjective_animal.R
\name{adjective_animal}
\alias{adjective_animal}
\title{Ids based on a number of adjectives and an animal}
\usage{
adjective_animal(
  n = 1,
  n_adjectives = 1,
  style = "snake",
  max_len = Inf,
  alliterate = FALSE,
  global = TRUE,
  use_openssl = NULL
)
}
\arguments{
\item{n}{number of ids to return.  If \code{NULL}, it instead returns
the generating function}

\item{n_adjectives}{Number of adjectives to prefix the animal with}

\item{style}{Style to join words with.  Can be one of "Pascal",
"camel", "snake", "kebab", "dot", "title", "sentence", "lower",
"upper", "constant" or "spongemock"}

\item{max_len}{The maximum length of a word part to include (this
may be useful because some of the names are rather long.  This
stops you generating a
\code{hexakosioihexekontahexaphobic_queenalexandrasbirdwingbutterfly}).
A vector of length 2 can be passed in here in which case the
first element will apply to the adjectives (all of them) and the
second element will apply to the animals.}

\item{alliterate}{Produce "alliterative" adjective animals (e.g.,
\code{hessian_hamster}).  Note that this cannot provide an equal
probability of any particular combination because it forces a
weighted sampling.  Adjectives may also be repeated if
\code{n_adjectives} is more than 1.}

\item{global}{Use global random number generator that responds to
\code{set.seed} (see \link{random_id} for details, but
note that the default here is different).}

\item{use_openssl}{Use openssl for random number generation when
using a non-global generator (see \link{random_id} for
details)}
}
\description{
Ids based on a number of adjectives and an animal
}
\details{
The list of adjectives and animals comes from
\url{https://github.com/a-type/adjective-adjective-animal}, and in turn
from <gfycat.com>
}
\examples{
# Generate a random identifier:
ids::adjective_animal()

# Generate a bunch all at once:
ids::adjective_animal(5)

# Control the style of punctuation with the style argument:
ids::adjective_animal(style = "lower")
ids::adjective_animal(style = "CONSTANT")
ids::adjective_animal(style = "camel")
ids::adjective_animal(style = "kebab")
ids::adjective_animal(style = "spongemock")

# Control the number of adjectives used
ids::adjective_animal(n_adjectives = 3)

# This can get out of hand quickly though:
ids::adjective_animal(n_adjectives = 7)

# Limit the length of adjectives and animals used:
ids::adjective_animal(10, max_len = 6)

# The lengths can be controlled for adjectives and animals
# separately, with Inf meaning no limit:
ids::adjective_animal(10, max_len = c(6, Inf), n_adjectives = 2)

# Pass n = NULL to bind arguments to a function
id <- ids::adjective_animal(NULL, n_adjectives = 2,
                            style = "dot", max_len = 6)
id()
id(10)

# Alliterated adjective animals always aid added awesomeness
ids::adjective_animal(10, n_adjectives = 3, alliterate = TRUE)
}
\author{
Rich FitzJohn
}
